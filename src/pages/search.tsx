/* eslint-disable react-hooks/exhaustive-deps */
import { getCookie } from "cookies-next";
import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { Fragment, memo, useEffect, useMemo, useState } from "react";
import { getEnabledCategories } from "trace_events";
import { CategoryCard } from "../components/Category";
import { CategoryCardGroup } from "../components/Category/styles";
import { Header } from "../components/Header";
import { WidgetUser, WidgetUserAvatar } from "../components/Home/styles";
import { DownIcon } from "../components/icons/DownIcon";
import { Main } from "../components/Layout/styles";
import { SearchComponent } from "../components/Search";
import { Container, SearchInput } from "../components/Search/styled";
import { useAuth } from "../context/Auth/AuthProvider";
import { useDebounce } from "../hooks/Debouce";
import useMediaQuery from "../hooks/MediaQueryHook";
import { getCategories, searchMedia } from "../lib/api";

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const token = getCookie("access_token", {
    req,
    res,
  }) as string;
  const categories = await getCategories(token);

  return {
    props: {
      categories: categories.items || null,
    },
  };
};

type Props = {
  categories: SpotifyApi.CategoryObject[];
};

function SearchPage({ categories }: Props) {
  const isMobile = useMediaQuery("(max-width: 768px)");
  const isTablet = useMediaQuery("(min-width: 768px) and (max-width: 1024px)");
  const { user } = useAuth()!;
  const [searchQuery, setSearchQuery] = useState("");
  const [results, setResults] = useState<SpotifyApi.SearchResponse | null>(
    null
  );

  const token = getCookie("access_token") as string;

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
  };

  const debouncedSearchQuery = useDebounce(searchQuery, 700);

  useEffect(() => {
    if (debouncedSearchQuery) {
      (async () => {
        const searchResults = await searchMedia(token, debouncedSearchQuery);
        setResults(searchResults);
      })();
    } else {
      setResults(null);
    }
  }, [debouncedSearchQuery]);

  const momorizedSearchComponent = useMemo(() => {
    return <SearchComponent results={results!} />;
  }, [results]);
  return (
    <Fragment>
      <Header>
        <SearchInput
          onChange={handleSearch}
          placeholder="Artistas, mÃºsicas ou podcasts"
        />
        <WidgetUser closed={isTablet}>
          <WidgetUserAvatar>
            <Image
              layout="fill"
              src={(user?.images || [])[0]?.url || "/images/avatar.webp"}
              alt={user?.display_name}
            />
          </WidgetUserAvatar>
          <span>{user?.display_name}</span>
          <DownIcon />
        </WidgetUser>
      </Header>

      <Head>
        <title>Spotify</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        {results ? (
          momorizedSearchComponent
        ) : (
          <CategoryCardGroup>
            {categories?.map((categorie) => (
              <CategoryCard key={categorie.id} item={categorie} />
            ))}
          </CategoryCardGroup>
        )}
      </Container>
    </Fragment>
  );
}

export default SearchPage;
